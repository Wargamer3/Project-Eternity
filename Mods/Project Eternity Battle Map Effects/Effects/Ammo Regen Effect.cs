using System;
using System.IO;
using System.Globalization;
using System.ComponentModel;
using ProjectEternity.Core;
using ProjectEternity.Core.Item;
using ProjectEternity.Core.Effects;

namespace ProjectEternity.GameScreens.BattleMapScreen
{
    public sealed class AmmoRegenEffect : SkillEffect
    {
        public static string Name = "Ammo Regen Effect";

        private Operators.NumberTypes _NumberType;
        private string _AmmoRegenValue;

        public AmmoRegenEffect()
            : base(Name, false)
        {
            _NumberType = Operators.NumberTypes.Absolute;
        }

        public AmmoRegenEffect(UnitEffectParams Params)
            : base(Name, false, Params)
        {
        }
        
        protected override void Load(BinaryReader BR)
        {
            _NumberType = (Operators.NumberTypes)BR.ReadByte();
            _AmmoRegenValue = BR.ReadString();
        }

        protected override void Save(BinaryWriter BW)
        {
            BW.Write((byte)_NumberType);
            BW.Write(_AmmoRegenValue);
        }

        public override bool CanActivate()
        {
            foreach (Core.Attacks.Attack ActiveAttack in Params.GlobalContext.EffectTargetUnit.ListAttack)
            {
                if (ActiveAttack.Ammo < ActiveAttack.MaxAmmo)
                {
                    return true;
                }
            }

            return false;
        }

        protected override string DoExecuteEffect()
        {
            string EvaluationResult = Params.GlobalContext.ActiveParser.Evaluate(_AmmoRegenValue);

            string ExtraText = "";
            if (EvaluationResult != _AmmoRegenValue)
            {
                ExtraText = " (" + _AmmoRegenValue + ")";
            }

            if (_NumberType == Operators.NumberTypes.Absolute)
            {
                int EvaluationValue = (int)double.Parse(EvaluationResult, CultureInfo.InvariantCulture);

                foreach (Core.Attacks.Attack ActiveAttack in Params.LocalContext.EffectTargetUnit.ListAttack)
                {
                    ActiveAttack.Ammo = Math.Min(ActiveAttack.MaxAmmo, ActiveAttack.Ammo + EvaluationValue);
                }

                return "EN regenerated by " + EvaluationValue + ExtraText;
            }
            else if (_NumberType == Operators.NumberTypes.Relative)
            {
                float EvaluationValue = float.Parse(EvaluationResult, CultureInfo.InvariantCulture);

                foreach (Core.Attacks.Attack ActiveAttack in Params.LocalContext.EffectTargetUnit.ListAttack)
                {
                    ActiveAttack.Ammo = Math.Min(ActiveAttack.MaxAmmo, ActiveAttack.Ammo + (int)Math.Round(ActiveAttack.MaxAmmo * EvaluationValue));
                }

                return "EN regenerated by " + EvaluationValue + ExtraText + "%";
            }

            return "EN regenerated by " + EvaluationResult + ExtraText;
        }

        protected override void ReactivateEffect()
        {
            //Don't regen Ammo on reactivation
        }

        protected override BaseEffect DoCopy()
        {
            AmmoRegenEffect NewEffect = new AmmoRegenEffect(Params);

            NewEffect._NumberType = _NumberType;
            NewEffect._AmmoRegenValue = _AmmoRegenValue;

            return NewEffect;
        }

        protected override void DoCopyMembers(BaseEffect Copy)
        {
            AmmoRegenEffect NewEffect = (AmmoRegenEffect)Copy;

            _NumberType = NewEffect._NumberType;
            _AmmoRegenValue = NewEffect._AmmoRegenValue;
        }

        #region Properties

        [CategoryAttribute("Effect Attributes"),
        DescriptionAttribute(".")]
        public Operators.NumberTypes NumberType
        {
            get { return _NumberType; }
            set { _NumberType = value; }
        }

        [CategoryAttribute("Effect Attributes"),
        DescriptionAttribute(".")]
        public string AmmoRegenValue
        {
            get { return _AmmoRegenValue; }
            set { _AmmoRegenValue = value; }
        }

        #endregion
    }
}
